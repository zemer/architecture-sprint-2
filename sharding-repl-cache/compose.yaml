name: sharding-repl-cache
services:
  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - router
      - redis
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://173.17.0.2"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://173.17.0.10:6379"
    networks:
      app-network:
        ipv4_address: 173.17.0.20

  #роутер
  router:
    image: mongo:latest
    container_name: router
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.2
    command: [
        "mongos", #обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27017",
      ]
    depends_on:
      - configSrv
      - shard1-1
      - shard1-2
      - shard1-3
      - shard2-1
      - shard2-2
      - shard2-3
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.3
    volumes:
      - config-data:/data/db
    command: [
        "--configsvr", #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017",
      ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #1-й шард
  shard1-1:
    image: mongo:latest
    container_name: shard1-1
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.4
    volumes:
      - shard1-1-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018",
      ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  shard1-2:
    image: mongo:latest
    container_name: shard1-2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - shard1-2-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018",
      ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  shard1-3:
    image: mongo:latest
    container_name: shard1-3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    volumes:
      - shard1-3-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018",
      ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #2-й шард
  shard2-1:
    image: mongo:latest
    container_name: shard2-1
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    volumes:
      - shard2-1-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплики
        "--bind_ip_all",
        "--port",
        "27019",
      ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #2-й шард
  shard2-2:
    image: mongo:latest
    container_name: shard2-2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-2-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all",
        "--port",
        "27019",
      ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #2-й шард
  shard2-3:
    image: mongo:latest
    container_name: shard2-3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard2-3-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all",
        "--port",
        "27019",
      ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      app-network:
        ipv4_address: 173.17.0.10

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-1-data:
  shard1-2-data:
  shard1-3-data:
  shard2-1-data:
  shard2-2-data:
  shard2-3-data:
  redis_data: {}
